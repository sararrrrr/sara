AWSTemplateFormatVersion: "2010-09-09"
Description: >
  AWS setup with two EC2 instances across two Availability Zones, 
  one VPC, an Internet Gateway, and an Application Load Balancer, running the same application.

Parameters:
  AMI:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
    Description: "Latest Amazon Linux 2 AMI ID"

Resources:
  # VPC
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: "Name"
          Value: "ProjectVPC"

  # Subnets in different AZs
  SubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "Name"
          Value: "SubnetA"

  SubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "Name"
          Value: "SubnetB"

  # Internet Gateway and Route Table
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Name"
          Value: "ProjectInternetGateway"

  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "PublicRouteTable"

  PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  RouteTableAssociationA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref SubnetA
      RouteTableId: !Ref RouteTable

  RouteTableAssociationB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref SubnetB
      RouteTableId: !Ref RouteTable

  # Security Group
  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow HTTP and SSH"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"

  # EC2 Instances
  InstanceA:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: "t2.micro"
      ImageId: !Ref AMI
      SubnetId: !Ref SubnetA
      SecurityGroupIds:
        - !Ref SecurityGroup
      Tags:
        - Key: "Name"
          Value: "InstanceA"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          # Install HTTP server and start service
          sudo yum install -y httpd
          echo "<html><body><h1 style='text-align: center;'>???????? ????</h1><h2 style='text-align: center;'>Application Instance A - Running in Availability Zone: AZ-A</h2><footer style='position: absolute; bottom: 10px; width: 100%; text-align: center;'>???? ??????? ? ???? ??????</footer></body></html>" > /var/www/html/index.html
          sudo systemctl start httpd
          sudo systemctl enable httpd

  InstanceB:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: "t2.micro"
      ImageId: !Ref AMI
      SubnetId: !Ref SubnetB
      SecurityGroupIds:
        - !Ref SecurityGroup
      Tags:
        - Key: "Name"
          Value: "InstanceB"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          # Install HTTP server and start service
          sudo yum install -y httpd
          echo "<html><body><h1 style='text-align: center;'>???????? ????</h1><h2 style='text-align: center;'>Application Instance B - Running in Availability Zone: AZ-B</h2><footer style='position: absolute; bottom: 10px; width: 100%; text-align: center;'>???? ??????? ? ???? ??????</footer></body></html>" > /var/www/html/index.html
          sudo systemctl start httpd
          sudo systemctl enable httpd

  # Load Balancer
  LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: "MyAppLoadBalancer"
      Subnets:
        - !Ref SubnetA
        - !Ref SubnetB
      SecurityGroups:
        - !Ref SecurityGroup
      Scheme: "internet-facing"
      Type: "application"

  # Target Group
  TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: "MyAppTargetGroup"
      VpcId: !Ref VPC
      Port: 80
      Protocol: "HTTP"
      TargetType: "instance"
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: "HTTP"
      HealthCheckPort: "80"
      HealthCheckPath: "/"
      Matcher:
        HttpCode: "200-399"
      Targets:
        - Id: !Ref InstanceA
        - Id: !Ref InstanceB

  # Load Balancer Listener
  Listener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: "HTTP"

Outputs:
  LoadBalancerDNSName:
    Description: "DNS name of the Load Balancer"
    Value: !GetAtt LoadBalancer.DNSName